// -*- mode: js2; -*-
"use strict";


// TODO: Lots of opportunity throughout for reuse.


const align     = require('string-align');
const cassandra = require('cassandra-driver');
const colors    = require('colors/safe');
const fs        = require('fs');
const yaml      = require('js-yaml');
const P         = require('bluebird');

const balancing = cassandra.policies.loadBalancing;
const blue      = colors.blue;
const yellow    = colors.yellow;

const argv      = require('yargs')
      .usage('Usage: $0 [keyspace] [table]')
      .options('h', {alias: 'help'})
      .options('H', {
          alias: 'hostname',
          default: 'localhost',
          describe: 'Contact hostname',
          type: 'string'
      })
      .options('P', {
          alias: 'port',
          default: 9042,
          describe: 'Contact port number',
          type: 'number'
      })
      .options('u', {
          alias: 'username',
          default: 'cassandra',
          describe: 'Cassandra username',
          type: 'string'
      })
      .options('p', {
          alias: 'password',
          default: 'cassandra',
          describe: 'Cassandra password',
          type: 'string'
      })
      .options('c', {
          alias: 'config',
          describe: 'RESTBase configuration file',
          type: 'string'
      })
      .argv;

if (argv.help) {
    yargs.showHelp();
    process.exit(0);
}

const host     = argv.hostname;
const port     = argv.port;
const keyspace = argv._[0];
const table    = argv._[1];
const contact  = `${host}:${port}`;

var user, pass;

function getConfig(fname) {
    const config = yaml.safeLoad(fs.readFileSync(fname));
    return config.default_project['x-modules'][0].options.table;
}

// Parse the user/pass from a RESTBase config, if supplied.
if (argv.config) {
    const conf = getConfig(argv.config);
    user = conf.username;
    pass = conf.password;
}
else {
    user = argv.username;
    pass = argv.password;
}

/** Creates a single entry whitelisting loadbalancing policy. */
const whitelist = (contact) => {
    return new balancing.WhiteListPolicy(new balancing.RoundRobinPolicy(), [ contact ]);
};

/** Creates a single connection pool. */
function connect(contact, username, password) {
    const client = new cassandra.Client({
        contactPoints: [ contact ],
        authProvider: new cassandra.auth.PlainTextAuthProvider(username, password),
        sslOptions: { ca: '/dev/null' },
        promiseFactory: P.fromCallback,
        queryOptions: { consistency: cassandra.types.consistencies.one },
        policies: { loadBalancing: whitelist(contact) }
    });
    return client.connect().then(() => client);
}

function getNodesList() {
    return connect(contact, user, pass)
        .then((client) => {
            return P.resolve(client.hosts.keys()).finally(() => client.shutdown());
        });
}

const cqlQuery = 'SELECT keyspace_name,table_name,id FROM system_schema.tables';

getNodesList()
    .then((nodes) => {
        return P.each(nodes, (node) => {
            return connect(node, user, pass)
                .then((client) => {
                    return client.execute(cqlQuery)
                        .then((res) => {
                            res.rows.forEach((row) => {
                                if (keyspace && (row.keyspace_name !== keyspace))
                                    return;
                                if (table && (row.table_name !== table))
                                    return;
                                console.log(blue(align(node, 20, 'left')),
                                    `| ${yellow(row.keyspace_name)} | ${yellow(row.table_name)} | ${yellow(row.id)}`);
                            });
                        })
                        .finally(() => client.shutdown());
                });
        });
    });
