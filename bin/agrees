// -*- mode: js2; -*-
"use strict";


const P       = require('bluebird');
const align   = require('string-align');
const check   = require('../cassandra-schema').checkSchemaAgreement;
const colors  = require('colors/safe');
const fs      = require('fs');
const reverse = P.promisify(require('dns').reverse);
const yaml    = require('js-yaml');

const green   = colors.green;
const red     = colors.red;
const yellow  = colors.yellow;

const argv  = require('yargs')
      .usage('Usage: $0 [options]')
      .options('h', {alias: 'help'})
      .options('H', {
          alias: 'hostname',
          default: 'localhost',
          describe: 'Contact hostname',
          type: 'string'
      })
      .options('P', {
          alias: 'port',
          default: 9042,
          describe: 'Contact port number',
          type: 'number'
      })
      .options('u', {
          alias: 'username',
          default: 'cassandra',
          describe: 'Cassandra username',
          type: 'string'
      })
      .options('p', {
          alias: 'password',
          default: 'cassandra',
          describe: 'Cassandra password',
          type: 'string'
      })
      .options('c', {
          alias: 'config',
          describe: 'RESTBase configuration file',
          type: 'string'
      })
      .options('verbose', {
	  describe: 'Use verbose output',
	  type: 'boolean'
      })
      .options('resolve', {
          describe: 'Resolve IP addresses to hostnames',
          type: 'boolean'
      })
      .argv;

if (argv.help) {
    yargs.showHelp();
    process.exit(0);
}

const host     = argv.hostname;
const port     = argv.port;

var user, pass;

function getConfig(fname) {
    const config = yaml.safeLoad(fs.readFileSync(fname));
    return config.default_project['x-modules'][0].options.table;
}

// Parse the user/pass from a RESTBase config, if supplied.
if (argv.config) {
    const conf = getConfig(argv.config);
    user = conf.username;
    pass = conf.password;
}
else {
    user = argv.username;
    pass = argv.password;
}

const options = {
    credentials: {
        username: user,
        password: pass
    }
};


/**
 * Massage a node/version map as necessary to resolve IP addresses
 * into hostnames.
 */
function maybeResolve(versions) {
    if (argv.verbose && argv.resolve) {
        const massaged = {};
        const deferred = [];
        Object.keys(versions).forEach((key) => {
            deferred.push(
                reverse(key)
                    .then((host) => {
                        massaged[host] = versions[key];
                    })
            );
        });
        return P.all(deferred)
            .then(() => {
                return massaged;
            });
    }
    else {
        // No transformations necessary; Return as-is
        return P.resolve(versions);
    }
}


check(host, port, options)
    .then((result) => {
        const agrees = result.agrees;
        maybeResolve(result.versions)
            .then((versions) => {
                if (argv.verbose) {
                    Object.keys(versions).forEach((key) => {
		        console.log(`${yellow(align(key, 16, 'left'))}`, '|', `${green(versions[key])}`);
	            });
                }

                const colorFun = agrees ? green : red;
                console.log(colorFun(`Nodes ${agrees ? '' : 'DO NOT '}agree on schema versions`));
                process.exit(agrees ? 0 : 5);
            });
    });
